// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?     @db.MediumText
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  records         Record[]
  streams         Stream[]
  messages        Message[]
  sellerChat      Chat[]      @relation(name: "sellerChat")
  buyerChat       Chat[]      @relation(name: "buyerChat")
  productSeller   Product[]   @relation(name: "productSeller")
  productBuyer    Product[]   @relation(name: "productBuyer")
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Product {
  id              Int      @id @default(autoincrement())
  imageUrl        String
  name            String
  price           Int
  sellState       String   @default("selling")
  description     String   @db.MediumText
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productSellerId Int
  productSeller   User     @relation(name: "productSeller", fields: [productSellerId], references: [id], onDelete: Cascade)
  productBuyer    User?    @relation(name: "productBuyer", fields: [productBuyerId], references: [id], onDelete: Cascade)
  productBuyerId  Int?     @default(0)
  records         Record[]
  chats           Chat[]
  reviews         Review[]
}

// user 대신 seller와 buyer로 구분

model Post {
  id         Int         @id @default(autoincrement())
  question   String      @db.MediumText
  latitude   Float?
  longitude  Float?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers    Answer[]
  wonderings Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// review model 설정
model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  score        Int      @default(1)
  product      Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User?    @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int?
  productId    Int?     @default(1)
  chat         Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId       Int?     @unique
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
}

enum Kind {
  Purchase
  Fav
  Sale
}

model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream?  @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int?
}

// chat model 설정
model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  seller    User      @relation(name: "sellerChat", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  Int
  buyer     User      @relation(name: "buyerChat", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   Int
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  review    Review?
}
